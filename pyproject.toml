[build-system]
requires = ["setuptools >= 42", "versioningit ~= 1.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "AnisoNet"
description = "An equivariant graph neural network to predict dielectric tensors."
readme = "README.md"
keywords = ["chemistry", "machine-learning"]
license = { text = "MIT" }
authors = [{ name = "Yuchen Lou, Alex Ganose", email = "yuchen.lou19@imperial.ac.uk" }]
dynamic = ["version"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "Intended Audience :: System Administrators",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Topic :: Other/Nonlisted Topic",
    "Topic :: Scientific/Engineering",
]
requires-python = ">=3.9"

dependencies = ["matminer", "pymatgen", "torch", "ase", "click", "e3nn", "lightning"]

[project.optional-dependencies]
train = ["lightning"]
docs = [
    "furo==2023.8.19",
    "ipython==8.14.0",
    "jsonschema[format]",
    "myst_parser==2.0.0",
    "numpydoc==1.5.0",
    "sphinx==7.2.4",
    "sphinx-copybutton==0.5.2",
    "sphinx_design==0.5.0",
]
dev = ["pre-commit>=2.12.1"]
tests = ["pytest-cov==4.1.0", "pytest==7.4.0"]
strict = ["torch==2.0.1", "ase==3.22.1",  "click==8.1.7", "lightning==2.0.9"]

[project.urls]
repository = "https://github.com/virtualatoms/valml"
documentation = "https://virtualatoms.github.io/valml/"

[tool.versioningit.vcs]
method = "git"
default-tag = "0.0.1"

[tool.flake8]
max-line-length = 88
max-doc-length = 88
select = "C, E, F, W, B"
extend-ignore = "E203, W503, E501, F401, RST21, B019"
min-python-version = "3.8.0"
docstring-convention = "numpy"
rst-roles = "class, func, ref, obj"

[tool.mypy]
ignore_missing_imports = true
no_strict_optional = true

[tool.coverage.run]
include = ["src/*"]
parallel = true
branch = true

[tool.coverage.paths]
source = ["src/"]

[tool.coverage.report]
skip_covered = true
show_missing = true
exclude_lines = [
    '^\s*@overload( |$)',
    '^\s*assert False(,|$)',
    'if typing.TYPE_CHECKING:',
]

[tool.ruff]
target-version = "py38"
select = [
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "D",    # pydocstyle
    "E",    # pycodestyle error
    "EXE",  # flake8-executable
    "F",    # pyflakes
    "FLY",  # flynt
    "I",    # isort
    "ICN",  # flake8-import-conventions
    "ISC",  # flake8-implicit-str-concat
    "PD",   # pandas-vet
    "PERF", # perflint
    "PIE",  # flake8-pie
    "PL",   # pylint
    "PT",   # flake8-pytest-style
    "PYI",  # flakes8-pyi
    "Q",    # flake8-quotes
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "RUF",  # Ruff-specific rules
    "SIM",  # flake8-simplify
    "SLOT", # flake8-slots
    "TCH",  # flake8-type-checking
    "TID",  # tidy imports
    "TID",  # flake8-tidy-imports
    "UP",   # pyupgrade
    "W",    # pycodestyle warning
    "YTT",  # flake8-2020
]
ignore = [
    "PD011",   # pandas-use-of-dot-values
    "PERF203", # try-except-in-loop
    "PLR",     # pylint-refactor
    "PT004",   # pytest-missing-fixture-name-underscore
    "PT006",   # pytest-parametrize-names-wrong-type
    "RUF013",  # implicit-optional
    # TODO remove PT011, pytest.raises() should always check err msg
    "PT011", # pytest-raises-too-broad
    "PT013", # pytest-incorrect-pytest-import
    "B019",  # `functools.lru_cache`
]
pydocstyle.convention = "numpy"
isort.known-first-party = ["valml"]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"**/tests/*" = ["D"]


[project.scripts]
anisonet-train = "anisonet.cli:train"
